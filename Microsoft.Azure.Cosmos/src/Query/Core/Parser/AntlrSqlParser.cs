//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\CosmosSQLANTLR\CosmosSqlAntlr\CosmosSqlAntlr\sql.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Microsoft.Azure.Cosmos.Query.Core.Parser
{
    using System;
    using System.IO;
    using Antlr4.Runtime;
    using Antlr4.Runtime.Atn;
    using Antlr4.Runtime.Misc;
    using Antlr4.Runtime.Tree;
    using Antlr4.Runtime.Dfa;

    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
    internal partial class AntlrSqlParser : Parser
    {
        protected static DFA[] decisionToDFA;
        protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
        public const int
            T__0 = 1, T__1 = 2, T__2 = 3, T__3 = 4, T__4 = 5, T__5 = 6, T__6 = 7, T__7 = 8, T__8 = 9,
            T__9 = 10, T__10 = 11, T__11 = 12, T__12 = 13, T__13 = 14, T__14 = 15, T__15 = 16, T__16 = 17,
            T__17 = 18, T__18 = 19, T__19 = 20, T__20 = 21, T__21 = 22, T__22 = 23, T__23 = 24,
            T__24 = 25, T__25 = 26, T__26 = 27, K_AND = 28, K_ARRAY = 29, K_AS = 30, K_ASC = 31,
            K_BETWEEN = 32, K_BY = 33, K_DESC = 34, K_DISTINCT = 35, K_EXISTS = 36, K_FALSE = 37,
            K_FROM = 38, K_GROUP = 39, K_IN = 40, K_JOIN = 41, K_LIMIT = 42, K_NOT = 43, K_NULL = 44,
            K_OFFSET = 45, K_OR = 46, K_ORDER = 47, K_SELECT = 48, K_TOP = 49, K_TRUE = 50, K_UDF = 51,
            K_UNDEFINED = 52, K_VALUE = 53, K_WHERE = 54, WS = 55, NUMERIC_LITERAL = 56, STRING_LITERAL = 57,
            IDENTIFIER = 58;
        public const int
            RULE_program = 0, RULE_sql_query = 1, RULE_select_clause = 2, RULE_top_spec = 3,
            RULE_selection = 4, RULE_select_star_spec = 5, RULE_select_value_spec = 6,
            RULE_select_list_spec = 7, RULE_select_item = 8, RULE_from_clause = 9,
            RULE_collection_expression = 10, RULE_collection = 11, RULE_path_expression = 12,
            RULE_where_clause = 13, RULE_group_by_clause = 14, RULE_order_by_clause = 15,
            RULE_order_by_items = 16, RULE_order_by_item = 17, RULE_sort_order = 18,
            RULE_offset_limit_clause = 19, RULE_offset_count = 20, RULE_limit_count = 21,
            RULE_scalar_expression = 22, RULE_scalar_expression_list = 23, RULE_binary_operator = 24,
            RULE_unary_operator = 25, RULE_object_propertty_list = 26, RULE_object_property = 27,
            RULE_literal = 28;
        public static readonly string[] ruleNames = {
        "program", "sql_query", "select_clause", "top_spec", "selection", "select_star_spec",
        "select_value_spec", "select_list_spec", "select_item", "from_clause",
        "collection_expression", "collection", "path_expression", "where_clause",
        "group_by_clause", "order_by_clause", "order_by_items", "order_by_item",
        "sort_order", "offset_limit_clause", "offset_count", "limit_count", "scalar_expression",
        "scalar_expression_list", "binary_operator", "unary_operator", "object_propertty_list",
        "object_property", "literal"
    };

        private static readonly string[] _LiteralNames = {
        null, "'*'", "','", "'('", "')'", "'.'", "'['", "']'", "'??'", "'?'",
        "':'", "'{'", "'}'", "'+'", "'&'", "'|'", "'^'", "'/'", "'='", "'>'",
        "'>='", "'<'", "'<='", "'%'", "'!='", "'||'", "'-'", "'~'", null, null,
        null, null, null, null, null, null, null, "'false'", null, null, null,
        null, null, null, "'null'", null, null, null, null, null, "'true'", null,
        "'undefined'"
    };
        private static readonly string[] _SymbolicNames = {
        null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, "K_AND", "K_ARRAY", "K_AS", "K_ASC", "K_BETWEEN",
        "K_BY", "K_DESC", "K_DISTINCT", "K_EXISTS", "K_FALSE", "K_FROM", "K_GROUP",
        "K_IN", "K_JOIN", "K_LIMIT", "K_NOT", "K_NULL", "K_OFFSET", "K_OR", "K_ORDER",
        "K_SELECT", "K_TOP", "K_TRUE", "K_UDF", "K_UNDEFINED", "K_VALUE", "K_WHERE",
        "WS", "NUMERIC_LITERAL", "STRING_LITERAL", "IDENTIFIER"
    };
        public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

        [NotNull]
        public override IVocabulary Vocabulary
        {
            get
            {
                return DefaultVocabulary;
            }
        }

        public override string GrammarFileName { get { return "sql.g4"; } }

        public override string[] RuleNames { get { return ruleNames; } }

        public override string SerializedAtn { get { return new string(_serializedATN); } }

        static AntlrSqlParser()
        {
            decisionToDFA = new DFA[_ATN.NumberOfDecisions];
            for (int i = 0; i < _ATN.NumberOfDecisions; i++)
            {
                decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
            }
        }

        public AntlrSqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

        public AntlrSqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
        : base(input, output, errorOutput)
        {
            Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
        }

        public partial class ProgramContext : ParserRuleContext
        {
            public Sql_queryContext sql_query()
            {
                return GetRuleContext<Sql_queryContext>(0);
            }
            public ITerminalNode Eof() { return GetToken(AntlrSqlParser.Eof, 0); }
            public ProgramContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_program; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterProgram(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitProgram(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitProgram(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ProgramContext program()
        {
            ProgramContext _localctx = new ProgramContext(Context, State);
            EnterRule(_localctx, 0, RULE_program);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 58; sql_query();
                    State = 59; Match(Eof);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Sql_queryContext : ParserRuleContext
        {
            public Select_clauseContext select_clause()
            {
                return GetRuleContext<Select_clauseContext>(0);
            }
            public From_clauseContext from_clause()
            {
                return GetRuleContext<From_clauseContext>(0);
            }
            public Where_clauseContext where_clause()
            {
                return GetRuleContext<Where_clauseContext>(0);
            }
            public Group_by_clauseContext group_by_clause()
            {
                return GetRuleContext<Group_by_clauseContext>(0);
            }
            public Order_by_clauseContext order_by_clause()
            {
                return GetRuleContext<Order_by_clauseContext>(0);
            }
            public Offset_limit_clauseContext offset_limit_clause()
            {
                return GetRuleContext<Offset_limit_clauseContext>(0);
            }
            public Sql_queryContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_sql_query; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterSql_query(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitSql_query(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSql_query(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Sql_queryContext sql_query()
        {
            Sql_queryContext _localctx = new Sql_queryContext(Context, State);
            EnterRule(_localctx, 2, RULE_sql_query);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 61; select_clause();
                    State = 63;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == K_FROM)
                    {
                        {
                            State = 62; from_clause();
                        }
                    }

                    State = 66;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == K_WHERE)
                    {
                        {
                            State = 65; where_clause();
                        }
                    }

                    State = 69;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == K_GROUP)
                    {
                        {
                            State = 68; group_by_clause();
                        }
                    }

                    State = 72;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == K_ORDER)
                    {
                        {
                            State = 71; order_by_clause();
                        }
                    }

                    State = 75;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == K_OFFSET)
                    {
                        {
                            State = 74; offset_limit_clause();
                        }
                    }

                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Select_clauseContext : ParserRuleContext
        {
            public ITerminalNode K_SELECT() { return GetToken(AntlrSqlParser.K_SELECT, 0); }
            public SelectionContext selection()
            {
                return GetRuleContext<SelectionContext>(0);
            }
            public ITerminalNode K_DISTINCT() { return GetToken(AntlrSqlParser.K_DISTINCT, 0); }
            public Top_specContext top_spec()
            {
                return GetRuleContext<Top_specContext>(0);
            }
            public Select_clauseContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_select_clause; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterSelect_clause(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitSelect_clause(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSelect_clause(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Select_clauseContext select_clause()
        {
            Select_clauseContext _localctx = new Select_clauseContext(Context, State);
            EnterRule(_localctx, 4, RULE_select_clause);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 77; Match(K_SELECT);
                    State = 79;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == K_DISTINCT)
                    {
                        {
                            State = 78; Match(K_DISTINCT);
                        }
                    }

                    State = 82;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == K_TOP)
                    {
                        {
                            State = 81; top_spec();
                        }
                    }

                    State = 84; selection();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Top_specContext : ParserRuleContext
        {
            public ITerminalNode K_TOP() { return GetToken(AntlrSqlParser.K_TOP, 0); }
            public ITerminalNode NUMERIC_LITERAL() { return GetToken(AntlrSqlParser.NUMERIC_LITERAL, 0); }
            public Top_specContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_top_spec; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterTop_spec(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitTop_spec(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitTop_spec(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Top_specContext top_spec()
        {
            Top_specContext _localctx = new Top_specContext(Context, State);
            EnterRule(_localctx, 6, RULE_top_spec);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 86; Match(K_TOP);
                    State = 87; Match(NUMERIC_LITERAL);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SelectionContext : ParserRuleContext
        {
            public Select_star_specContext select_star_spec()
            {
                return GetRuleContext<Select_star_specContext>(0);
            }
            public Select_value_specContext select_value_spec()
            {
                return GetRuleContext<Select_value_specContext>(0);
            }
            public Select_list_specContext select_list_spec()
            {
                return GetRuleContext<Select_list_specContext>(0);
            }
            public SelectionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_selection; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterSelection(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitSelection(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSelection(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SelectionContext selection()
        {
            SelectionContext _localctx = new SelectionContext(Context, State);
            EnterRule(_localctx, 8, RULE_selection);
            try
            {
                State = 92;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case T__0:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 89; select_star_spec();
                        }
                        break;
                    case K_VALUE:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 90; select_value_spec();
                        }
                        break;
                    case T__2:
                    case T__5:
                    case T__10:
                    case T__12:
                    case T__25:
                    case T__26:
                    case K_ARRAY:
                    case K_EXISTS:
                    case K_FALSE:
                    case K_NOT:
                    case K_NULL:
                    case K_TRUE:
                    case K_UDF:
                    case K_UNDEFINED:
                    case NUMERIC_LITERAL:
                    case STRING_LITERAL:
                    case IDENTIFIER:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 91; select_list_spec();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Select_star_specContext : ParserRuleContext
        {
            public Select_star_specContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_select_star_spec; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterSelect_star_spec(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitSelect_star_spec(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSelect_star_spec(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Select_star_specContext select_star_spec()
        {
            Select_star_specContext _localctx = new Select_star_specContext(Context, State);
            EnterRule(_localctx, 10, RULE_select_star_spec);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 94; Match(T__0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Select_value_specContext : ParserRuleContext
        {
            public ITerminalNode K_VALUE() { return GetToken(AntlrSqlParser.K_VALUE, 0); }
            public Scalar_expressionContext scalar_expression()
            {
                return GetRuleContext<Scalar_expressionContext>(0);
            }
            public Select_value_specContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_select_value_spec; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterSelect_value_spec(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitSelect_value_spec(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSelect_value_spec(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Select_value_specContext select_value_spec()
        {
            Select_value_specContext _localctx = new Select_value_specContext(Context, State);
            EnterRule(_localctx, 12, RULE_select_value_spec);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 96; Match(K_VALUE);
                    State = 97; scalar_expression(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Select_list_specContext : ParserRuleContext
        {
            public Select_itemContext[] select_item()
            {
                return GetRuleContexts<Select_itemContext>();
            }
            public Select_itemContext select_item(int i)
            {
                return GetRuleContext<Select_itemContext>(i);
            }
            public Select_list_specContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_select_list_spec; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterSelect_list_spec(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitSelect_list_spec(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSelect_list_spec(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Select_list_specContext select_list_spec()
        {
            Select_list_specContext _localctx = new Select_list_specContext(Context, State);
            EnterRule(_localctx, 14, RULE_select_list_spec);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 99; select_item();
                    State = 104;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == T__1)
                    {
                        {
                            {
                                State = 100; Match(T__1);
                                State = 101; select_item();
                            }
                        }
                        State = 106;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Select_itemContext : ParserRuleContext
        {
            public Scalar_expressionContext scalar_expression()
            {
                return GetRuleContext<Scalar_expressionContext>(0);
            }
            public ITerminalNode K_AS() { return GetToken(AntlrSqlParser.K_AS, 0); }
            public ITerminalNode IDENTIFIER() { return GetToken(AntlrSqlParser.IDENTIFIER, 0); }
            public Select_itemContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_select_item; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterSelect_item(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitSelect_item(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSelect_item(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Select_itemContext select_item()
        {
            Select_itemContext _localctx = new Select_itemContext(Context, State);
            EnterRule(_localctx, 16, RULE_select_item);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 107; scalar_expression(0);
                    State = 110;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == K_AS)
                    {
                        {
                            State = 108; Match(K_AS);
                            State = 109; Match(IDENTIFIER);
                        }
                    }

                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class From_clauseContext : ParserRuleContext
        {
            public ITerminalNode K_FROM() { return GetToken(AntlrSqlParser.K_FROM, 0); }
            public Collection_expressionContext collection_expression()
            {
                return GetRuleContext<Collection_expressionContext>(0);
            }
            public From_clauseContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_from_clause; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterFrom_clause(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitFrom_clause(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFrom_clause(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public From_clauseContext from_clause()
        {
            From_clauseContext _localctx = new From_clauseContext(Context, State);
            EnterRule(_localctx, 18, RULE_from_clause);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 112; Match(K_FROM);
                    State = 113; collection_expression(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Collection_expressionContext : ParserRuleContext
        {
            public Collection_expressionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_collection_expression; } }

            public Collection_expressionContext() { }
            public virtual void CopyFrom(Collection_expressionContext context)
            {
                base.CopyFrom(context);
            }
        }
        public partial class JoinCollectionExpressionContext : Collection_expressionContext
        {
            public Collection_expressionContext[] collection_expression()
            {
                return GetRuleContexts<Collection_expressionContext>();
            }
            public Collection_expressionContext collection_expression(int i)
            {
                return GetRuleContext<Collection_expressionContext>(i);
            }
            public ITerminalNode K_JOIN() { return GetToken(AntlrSqlParser.K_JOIN, 0); }
            public JoinCollectionExpressionContext(Collection_expressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterJoinCollectionExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitJoinCollectionExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitJoinCollectionExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class AliasedCollectionExpressionContext : Collection_expressionContext
        {
            public CollectionContext collection()
            {
                return GetRuleContext<CollectionContext>(0);
            }
            public ITerminalNode K_AS() { return GetToken(AntlrSqlParser.K_AS, 0); }
            public ITerminalNode IDENTIFIER() { return GetToken(AntlrSqlParser.IDENTIFIER, 0); }
            public AliasedCollectionExpressionContext(Collection_expressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterAliasedCollectionExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitAliasedCollectionExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitAliasedCollectionExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class ArrayIteratorCollectionExpressionContext : Collection_expressionContext
        {
            public ITerminalNode IDENTIFIER() { return GetToken(AntlrSqlParser.IDENTIFIER, 0); }
            public ITerminalNode K_IN() { return GetToken(AntlrSqlParser.K_IN, 0); }
            public CollectionContext collection()
            {
                return GetRuleContext<CollectionContext>(0);
            }
            public ArrayIteratorCollectionExpressionContext(Collection_expressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterArrayIteratorCollectionExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitArrayIteratorCollectionExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArrayIteratorCollectionExpression(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Collection_expressionContext collection_expression()
        {
            return collection_expression(0);
        }

        private Collection_expressionContext collection_expression(int _p)
        {
            ParserRuleContext _parentctx = Context;
            int _parentState = State;
            Collection_expressionContext _localctx = new Collection_expressionContext(Context, _parentState);
            Collection_expressionContext _prevctx = _localctx;
            int _startState = 20;
            EnterRecursionRule(_localctx, 20, RULE_collection_expression, _p);
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 124;
                    ErrorHandler.Sync(this);
                    switch (Interpreter.AdaptivePredict(TokenStream, 11, Context))
                    {
                        case 1:
                            {
                                _localctx = new AliasedCollectionExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;

                                State = 116; collection();
                                State = 119;
                                ErrorHandler.Sync(this);
                                switch (Interpreter.AdaptivePredict(TokenStream, 10, Context))
                                {
                                    case 1:
                                        {
                                            State = 117; Match(K_AS);
                                            State = 118; Match(IDENTIFIER);
                                        }
                                        break;
                                }
                            }
                            break;
                        case 2:
                            {
                                _localctx = new ArrayIteratorCollectionExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 121; Match(IDENTIFIER);
                                State = 122; Match(K_IN);
                                State = 123; collection();
                            }
                            break;
                    }
                    Context.Stop = TokenStream.LT(-1);
                    State = 131;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 12, Context);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                    {
                        if (_alt == 1)
                        {
                            if (ParseListeners != null)
                                TriggerExitRuleEvent();
                            _prevctx = _localctx;
                            {
                                {
                                    _localctx = new JoinCollectionExpressionContext(new Collection_expressionContext(_parentctx, _parentState));
                                    PushNewRecursionContext(_localctx, _startState, RULE_collection_expression);
                                    State = 126;
                                    if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
                                    State = 127; Match(K_JOIN);
                                    State = 128; collection_expression(2);
                                }
                            }
                        }
                        State = 133;
                        ErrorHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(TokenStream, 12, Context);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                UnrollRecursionContexts(_parentctx);
            }
            return _localctx;
        }

        public partial class CollectionContext : ParserRuleContext
        {
            public CollectionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_collection; } }

            public CollectionContext() { }
            public virtual void CopyFrom(CollectionContext context)
            {
                base.CopyFrom(context);
            }
        }
        public partial class InputPathCollectionContext : CollectionContext
        {
            public ITerminalNode IDENTIFIER() { return GetToken(AntlrSqlParser.IDENTIFIER, 0); }
            public Path_expressionContext path_expression()
            {
                return GetRuleContext<Path_expressionContext>(0);
            }
            public InputPathCollectionContext(CollectionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterInputPathCollection(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitInputPathCollection(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitInputPathCollection(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class SubqueryCollectionContext : CollectionContext
        {
            public Sql_queryContext sql_query()
            {
                return GetRuleContext<Sql_queryContext>(0);
            }
            public SubqueryCollectionContext(CollectionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterSubqueryCollection(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitSubqueryCollection(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSubqueryCollection(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CollectionContext collection()
        {
            CollectionContext _localctx = new CollectionContext(Context, State);
            EnterRule(_localctx, 22, RULE_collection);
            try
            {
                State = 142;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case IDENTIFIER:
                        _localctx = new InputPathCollectionContext(_localctx);
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 134; Match(IDENTIFIER);
                            State = 136;
                            ErrorHandler.Sync(this);
                            switch (Interpreter.AdaptivePredict(TokenStream, 13, Context))
                            {
                                case 1:
                                    {
                                        State = 135; path_expression(0);
                                    }
                                    break;
                            }
                        }
                        break;
                    case T__2:
                        _localctx = new SubqueryCollectionContext(_localctx);
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 138; Match(T__2);
                            State = 139; sql_query();
                            State = 140; Match(T__3);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Path_expressionContext : ParserRuleContext
        {
            public Path_expressionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_path_expression; } }

            public Path_expressionContext() { }
            public virtual void CopyFrom(Path_expressionContext context)
            {
                base.CopyFrom(context);
            }
        }
        public partial class StringPathExpressionContext : Path_expressionContext
        {
            public Path_expressionContext path_expression()
            {
                return GetRuleContext<Path_expressionContext>(0);
            }
            public ITerminalNode STRING_LITERAL() { return GetToken(AntlrSqlParser.STRING_LITERAL, 0); }
            public StringPathExpressionContext(Path_expressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterStringPathExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitStringPathExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitStringPathExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class EpsilonPathExpressionContext : Path_expressionContext
        {
            public EpsilonPathExpressionContext(Path_expressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterEpsilonPathExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitEpsilonPathExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEpsilonPathExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class IdentifierPathExpressionContext : Path_expressionContext
        {
            public Path_expressionContext path_expression()
            {
                return GetRuleContext<Path_expressionContext>(0);
            }
            public ITerminalNode IDENTIFIER() { return GetToken(AntlrSqlParser.IDENTIFIER, 0); }
            public IdentifierPathExpressionContext(Path_expressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterIdentifierPathExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitIdentifierPathExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitIdentifierPathExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class NumberPathExpressionContext : Path_expressionContext
        {
            public Path_expressionContext path_expression()
            {
                return GetRuleContext<Path_expressionContext>(0);
            }
            public ITerminalNode NUMERIC_LITERAL() { return GetToken(AntlrSqlParser.NUMERIC_LITERAL, 0); }
            public NumberPathExpressionContext(Path_expressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterNumberPathExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitNumberPathExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitNumberPathExpression(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Path_expressionContext path_expression()
        {
            return path_expression(0);
        }

        private Path_expressionContext path_expression(int _p)
        {
            ParserRuleContext _parentctx = Context;
            int _parentState = State;
            Path_expressionContext _localctx = new Path_expressionContext(Context, _parentState);
            Path_expressionContext _prevctx = _localctx;
            int _startState = 24;
            EnterRecursionRule(_localctx, 24, RULE_path_expression, _p);
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    {
                        _localctx = new EpsilonPathExpressionContext(_localctx);
                        Context = _localctx;
                        _prevctx = _localctx;

                    }
                    Context.Stop = TokenStream.LT(-1);
                    State = 158;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 16, Context);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                    {
                        if (_alt == 1)
                        {
                            if (ParseListeners != null)
                                TriggerExitRuleEvent();
                            _prevctx = _localctx;
                            {
                                State = 156;
                                ErrorHandler.Sync(this);
                                switch (Interpreter.AdaptivePredict(TokenStream, 15, Context))
                                {
                                    case 1:
                                        {
                                            _localctx = new IdentifierPathExpressionContext(new Path_expressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_path_expression);
                                            State = 145;
                                            if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
                                            State = 146; Match(T__4);
                                            State = 147; Match(IDENTIFIER);
                                        }
                                        break;
                                    case 2:
                                        {
                                            _localctx = new NumberPathExpressionContext(new Path_expressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_path_expression);
                                            State = 148;
                                            if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
                                            State = 149; Match(T__5);
                                            State = 150; Match(NUMERIC_LITERAL);
                                            State = 151; Match(T__6);
                                        }
                                        break;
                                    case 3:
                                        {
                                            _localctx = new StringPathExpressionContext(new Path_expressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_path_expression);
                                            State = 152;
                                            if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
                                            State = 153; Match(T__5);
                                            State = 154; Match(STRING_LITERAL);
                                            State = 155; Match(T__6);
                                        }
                                        break;
                                }
                            }
                        }
                        State = 160;
                        ErrorHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(TokenStream, 16, Context);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                UnrollRecursionContexts(_parentctx);
            }
            return _localctx;
        }

        public partial class Where_clauseContext : ParserRuleContext
        {
            public ITerminalNode K_WHERE() { return GetToken(AntlrSqlParser.K_WHERE, 0); }
            public Scalar_expressionContext scalar_expression()
            {
                return GetRuleContext<Scalar_expressionContext>(0);
            }
            public Where_clauseContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_where_clause; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterWhere_clause(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitWhere_clause(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitWhere_clause(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Where_clauseContext where_clause()
        {
            Where_clauseContext _localctx = new Where_clauseContext(Context, State);
            EnterRule(_localctx, 26, RULE_where_clause);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 161; Match(K_WHERE);
                    State = 162; scalar_expression(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Group_by_clauseContext : ParserRuleContext
        {
            public ITerminalNode K_GROUP() { return GetToken(AntlrSqlParser.K_GROUP, 0); }
            public ITerminalNode K_BY() { return GetToken(AntlrSqlParser.K_BY, 0); }
            public Scalar_expression_listContext scalar_expression_list()
            {
                return GetRuleContext<Scalar_expression_listContext>(0);
            }
            public Group_by_clauseContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_group_by_clause; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterGroup_by_clause(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitGroup_by_clause(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitGroup_by_clause(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Group_by_clauseContext group_by_clause()
        {
            Group_by_clauseContext _localctx = new Group_by_clauseContext(Context, State);
            EnterRule(_localctx, 28, RULE_group_by_clause);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 164; Match(K_GROUP);
                    State = 165; Match(K_BY);
                    State = 166; scalar_expression_list();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Order_by_clauseContext : ParserRuleContext
        {
            public ITerminalNode K_ORDER() { return GetToken(AntlrSqlParser.K_ORDER, 0); }
            public ITerminalNode K_BY() { return GetToken(AntlrSqlParser.K_BY, 0); }
            public Order_by_itemsContext order_by_items()
            {
                return GetRuleContext<Order_by_itemsContext>(0);
            }
            public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_order_by_clause; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterOrder_by_clause(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitOrder_by_clause(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOrder_by_clause(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Order_by_clauseContext order_by_clause()
        {
            Order_by_clauseContext _localctx = new Order_by_clauseContext(Context, State);
            EnterRule(_localctx, 30, RULE_order_by_clause);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 168; Match(K_ORDER);
                    State = 169; Match(K_BY);
                    State = 170; order_by_items();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Order_by_itemsContext : ParserRuleContext
        {
            public Order_by_itemContext[] order_by_item()
            {
                return GetRuleContexts<Order_by_itemContext>();
            }
            public Order_by_itemContext order_by_item(int i)
            {
                return GetRuleContext<Order_by_itemContext>(i);
            }
            public Order_by_itemsContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_order_by_items; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterOrder_by_items(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitOrder_by_items(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOrder_by_items(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Order_by_itemsContext order_by_items()
        {
            Order_by_itemsContext _localctx = new Order_by_itemsContext(Context, State);
            EnterRule(_localctx, 32, RULE_order_by_items);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 172; order_by_item();
                    State = 177;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == T__1)
                    {
                        {
                            {
                                State = 173; Match(T__1);
                                State = 174; order_by_item();
                            }
                        }
                        State = 179;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Order_by_itemContext : ParserRuleContext
        {
            public Scalar_expressionContext scalar_expression()
            {
                return GetRuleContext<Scalar_expressionContext>(0);
            }
            public Sort_orderContext sort_order()
            {
                return GetRuleContext<Sort_orderContext>(0);
            }
            public Order_by_itemContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_order_by_item; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterOrder_by_item(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitOrder_by_item(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOrder_by_item(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Order_by_itemContext order_by_item()
        {
            Order_by_itemContext _localctx = new Order_by_itemContext(Context, State);
            EnterRule(_localctx, 34, RULE_order_by_item);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 180; scalar_expression(0);
                    State = 182;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == K_ASC || _la == K_DESC)
                    {
                        {
                            State = 181; sort_order();
                        }
                    }

                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Sort_orderContext : ParserRuleContext
        {
            public ITerminalNode K_ASC() { return GetToken(AntlrSqlParser.K_ASC, 0); }
            public ITerminalNode K_DESC() { return GetToken(AntlrSqlParser.K_DESC, 0); }
            public Sort_orderContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_sort_order; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterSort_order(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitSort_order(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSort_order(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Sort_orderContext sort_order()
        {
            Sort_orderContext _localctx = new Sort_orderContext(Context, State);
            EnterRule(_localctx, 36, RULE_sort_order);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 184;
                    _la = TokenStream.LA(1);
                    if (!(_la == K_ASC || _la == K_DESC))
                    {
                        ErrorHandler.RecoverInline(this);
                    }
                    else
                    {
                        ErrorHandler.ReportMatch(this);
                        Consume();
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Offset_limit_clauseContext : ParserRuleContext
        {
            public ITerminalNode K_OFFSET() { return GetToken(AntlrSqlParser.K_OFFSET, 0); }
            public Offset_countContext offset_count()
            {
                return GetRuleContext<Offset_countContext>(0);
            }
            public ITerminalNode K_LIMIT() { return GetToken(AntlrSqlParser.K_LIMIT, 0); }
            public Limit_countContext limit_count()
            {
                return GetRuleContext<Limit_countContext>(0);
            }
            public Offset_limit_clauseContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_offset_limit_clause; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterOffset_limit_clause(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitOffset_limit_clause(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOffset_limit_clause(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Offset_limit_clauseContext offset_limit_clause()
        {
            Offset_limit_clauseContext _localctx = new Offset_limit_clauseContext(Context, State);
            EnterRule(_localctx, 38, RULE_offset_limit_clause);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 186; Match(K_OFFSET);
                    State = 187; offset_count();
                    State = 188; Match(K_LIMIT);
                    State = 189; limit_count();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Offset_countContext : ParserRuleContext
        {
            public ITerminalNode NUMERIC_LITERAL() { return GetToken(AntlrSqlParser.NUMERIC_LITERAL, 0); }
            public Offset_countContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_offset_count; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterOffset_count(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitOffset_count(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOffset_count(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Offset_countContext offset_count()
        {
            Offset_countContext _localctx = new Offset_countContext(Context, State);
            EnterRule(_localctx, 40, RULE_offset_count);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 191; Match(NUMERIC_LITERAL);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Limit_countContext : ParserRuleContext
        {
            public ITerminalNode NUMERIC_LITERAL() { return GetToken(AntlrSqlParser.NUMERIC_LITERAL, 0); }
            public Limit_countContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_limit_count; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterLimit_count(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitLimit_count(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLimit_count(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Limit_countContext limit_count()
        {
            Limit_countContext _localctx = new Limit_countContext(Context, State);
            EnterRule(_localctx, 42, RULE_limit_count);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 193; Match(NUMERIC_LITERAL);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Scalar_expressionContext : ParserRuleContext
        {
            public Scalar_expressionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_scalar_expression; } }

            public Scalar_expressionContext() { }
            public virtual void CopyFrom(Scalar_expressionContext context)
            {
                base.CopyFrom(context);
            }
        }
        public partial class LiteralScalarExpressionContext : Scalar_expressionContext
        {
            public LiteralContext literal()
            {
                return GetRuleContext<LiteralContext>(0);
            }
            public LiteralScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterLiteralScalarExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitLiteralScalarExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLiteralScalarExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class BetweenScalarExpressionContext : Scalar_expressionContext
        {
            public Scalar_expressionContext[] scalar_expression()
            {
                return GetRuleContexts<Scalar_expressionContext>();
            }
            public Scalar_expressionContext scalar_expression(int i)
            {
                return GetRuleContext<Scalar_expressionContext>(i);
            }
            public ITerminalNode K_BETWEEN() { return GetToken(AntlrSqlParser.K_BETWEEN, 0); }
            public ITerminalNode K_AND() { return GetToken(AntlrSqlParser.K_AND, 0); }
            public ITerminalNode K_NOT() { return GetToken(AntlrSqlParser.K_NOT, 0); }
            public BetweenScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterBetweenScalarExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitBetweenScalarExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBetweenScalarExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class ObjectCreateScalarExpressionContext : Scalar_expressionContext
        {
            public Object_propertty_listContext object_propertty_list()
            {
                return GetRuleContext<Object_propertty_listContext>(0);
            }
            public ObjectCreateScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterObjectCreateScalarExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitObjectCreateScalarExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitObjectCreateScalarExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class InScalarExpressionContext : Scalar_expressionContext
        {
            public Scalar_expressionContext scalar_expression()
            {
                return GetRuleContext<Scalar_expressionContext>(0);
            }
            public ITerminalNode K_IN() { return GetToken(AntlrSqlParser.K_IN, 0); }
            public Scalar_expression_listContext scalar_expression_list()
            {
                return GetRuleContext<Scalar_expression_listContext>(0);
            }
            public ITerminalNode K_NOT() { return GetToken(AntlrSqlParser.K_NOT, 0); }
            public InScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterInScalarExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitInScalarExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitInScalarExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class ArrayCreateScalarExpressionContext : Scalar_expressionContext
        {
            public Scalar_expression_listContext scalar_expression_list()
            {
                return GetRuleContext<Scalar_expression_listContext>(0);
            }
            public ArrayCreateScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterArrayCreateScalarExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitArrayCreateScalarExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArrayCreateScalarExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class MemberIndexerScalarExpressionContext : Scalar_expressionContext
        {
            public Scalar_expressionContext[] scalar_expression()
            {
                return GetRuleContexts<Scalar_expressionContext>();
            }
            public Scalar_expressionContext scalar_expression(int i)
            {
                return GetRuleContext<Scalar_expressionContext>(i);
            }
            public MemberIndexerScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterMemberIndexerScalarExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitMemberIndexerScalarExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMemberIndexerScalarExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class SubqueryScalarExpressionContext : Scalar_expressionContext
        {
            public Sql_queryContext sql_query()
            {
                return GetRuleContext<Sql_queryContext>(0);
            }
            public SubqueryScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterSubqueryScalarExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitSubqueryScalarExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSubqueryScalarExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class PropertyRefScalarExpressionBaseContext : Scalar_expressionContext
        {
            public ITerminalNode IDENTIFIER() { return GetToken(AntlrSqlParser.IDENTIFIER, 0); }
            public PropertyRefScalarExpressionBaseContext(Scalar_expressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterPropertyRefScalarExpressionBase(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitPropertyRefScalarExpressionBase(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPropertyRefScalarExpressionBase(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class CoalesceScalarExpressionContext : Scalar_expressionContext
        {
            public Scalar_expressionContext[] scalar_expression()
            {
                return GetRuleContexts<Scalar_expressionContext>();
            }
            public Scalar_expressionContext scalar_expression(int i)
            {
                return GetRuleContext<Scalar_expressionContext>(i);
            }
            public CoalesceScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterCoalesceScalarExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitCoalesceScalarExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCoalesceScalarExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class ConditionalScalarExpressionContext : Scalar_expressionContext
        {
            public Scalar_expressionContext[] scalar_expression()
            {
                return GetRuleContexts<Scalar_expressionContext>();
            }
            public Scalar_expressionContext scalar_expression(int i)
            {
                return GetRuleContext<Scalar_expressionContext>(i);
            }
            public ConditionalScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterConditionalScalarExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitConditionalScalarExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitConditionalScalarExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class FunctionCallScalarExpressionContext : Scalar_expressionContext
        {
            public ITerminalNode IDENTIFIER() { return GetToken(AntlrSqlParser.IDENTIFIER, 0); }
            public ITerminalNode K_UDF() { return GetToken(AntlrSqlParser.K_UDF, 0); }
            public Scalar_expression_listContext scalar_expression_list()
            {
                return GetRuleContext<Scalar_expression_listContext>(0);
            }
            public FunctionCallScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterFunctionCallScalarExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitFunctionCallScalarExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFunctionCallScalarExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class ArrayScalarExpressionContext : Scalar_expressionContext
        {
            public ITerminalNode K_ARRAY() { return GetToken(AntlrSqlParser.K_ARRAY, 0); }
            public Sql_queryContext sql_query()
            {
                return GetRuleContext<Sql_queryContext>(0);
            }
            public ArrayScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterArrayScalarExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitArrayScalarExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArrayScalarExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class ExistsScalarExpressionContext : Scalar_expressionContext
        {
            public ITerminalNode K_EXISTS() { return GetToken(AntlrSqlParser.K_EXISTS, 0); }
            public Sql_queryContext sql_query()
            {
                return GetRuleContext<Sql_queryContext>(0);
            }
            public ExistsScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterExistsScalarExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitExistsScalarExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitExistsScalarExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class UnaryScalarExpressionContext : Scalar_expressionContext
        {
            public Unary_operatorContext unary_operator()
            {
                return GetRuleContext<Unary_operatorContext>(0);
            }
            public Scalar_expressionContext scalar_expression()
            {
                return GetRuleContext<Scalar_expressionContext>(0);
            }
            public UnaryScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterUnaryScalarExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitUnaryScalarExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitUnaryScalarExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class BinaryScalarExpressionContext : Scalar_expressionContext
        {
            public Scalar_expressionContext[] scalar_expression()
            {
                return GetRuleContexts<Scalar_expressionContext>();
            }
            public Scalar_expressionContext scalar_expression(int i)
            {
                return GetRuleContext<Scalar_expressionContext>(i);
            }
            public Binary_operatorContext binary_operator()
            {
                return GetRuleContext<Binary_operatorContext>(0);
            }
            public BinaryScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterBinaryScalarExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitBinaryScalarExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBinaryScalarExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class PropertyRefScalarExpressionRecursiveContext : Scalar_expressionContext
        {
            public Scalar_expressionContext scalar_expression()
            {
                return GetRuleContext<Scalar_expressionContext>(0);
            }
            public ITerminalNode IDENTIFIER() { return GetToken(AntlrSqlParser.IDENTIFIER, 0); }
            public PropertyRefScalarExpressionRecursiveContext(Scalar_expressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterPropertyRefScalarExpressionRecursive(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitPropertyRefScalarExpressionRecursive(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPropertyRefScalarExpressionRecursive(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Scalar_expressionContext scalar_expression()
        {
            return scalar_expression(0);
        }

        private Scalar_expressionContext scalar_expression(int _p)
        {
            ParserRuleContext _parentctx = Context;
            int _parentState = State;
            Scalar_expressionContext _localctx = new Scalar_expressionContext(Context, _parentState);
            Scalar_expressionContext _prevctx = _localctx;
            int _startState = 44;
            EnterRecursionRule(_localctx, 44, RULE_scalar_expression, _p);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 235;
                    ErrorHandler.Sync(this);
                    switch (Interpreter.AdaptivePredict(TokenStream, 23, Context))
                    {
                        case 1:
                            {
                                _localctx = new ArrayCreateScalarExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;

                                State = 196; Match(T__5);
                                State = 198;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__5) | (1L << T__10) | (1L << T__12) | (1L << T__25) | (1L << T__26) | (1L << K_ARRAY) | (1L << K_EXISTS) | (1L << K_FALSE) | (1L << K_NOT) | (1L << K_NULL) | (1L << K_TRUE) | (1L << K_UDF) | (1L << K_UNDEFINED) | (1L << NUMERIC_LITERAL) | (1L << STRING_LITERAL) | (1L << IDENTIFIER))) != 0))
                                {
                                    {
                                        State = 197; scalar_expression_list();
                                    }
                                }

                                State = 200; Match(T__6);
                            }
                            break;
                        case 2:
                            {
                                _localctx = new ArrayScalarExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 201; Match(K_ARRAY);
                                State = 202; Match(T__2);
                                State = 203; sql_query();
                                State = 204; Match(T__3);
                            }
                            break;
                        case 3:
                            {
                                _localctx = new ExistsScalarExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 206; Match(K_EXISTS);
                                State = 207; Match(T__2);
                                State = 208; sql_query();
                                State = 209; Match(T__3);
                            }
                            break;
                        case 4:
                            {
                                _localctx = new FunctionCallScalarExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 213;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                if (_la == K_UDF)
                                {
                                    {
                                        State = 211; Match(K_UDF);
                                        State = 212; Match(T__4);
                                    }
                                }

                                State = 215; Match(IDENTIFIER);
                                State = 216; Match(T__2);
                                State = 218;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__5) | (1L << T__10) | (1L << T__12) | (1L << T__25) | (1L << T__26) | (1L << K_ARRAY) | (1L << K_EXISTS) | (1L << K_FALSE) | (1L << K_NOT) | (1L << K_NULL) | (1L << K_TRUE) | (1L << K_UDF) | (1L << K_UNDEFINED) | (1L << NUMERIC_LITERAL) | (1L << STRING_LITERAL) | (1L << IDENTIFIER))) != 0))
                                {
                                    {
                                        State = 217; scalar_expression_list();
                                    }
                                }

                                State = 220; Match(T__3);
                            }
                            break;
                        case 5:
                            {
                                _localctx = new LiteralScalarExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 221; literal();
                            }
                            break;
                        case 6:
                            {
                                _localctx = new ObjectCreateScalarExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 222; Match(T__10);
                                State = 224;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                if (_la == STRING_LITERAL)
                                {
                                    {
                                        State = 223; object_propertty_list();
                                    }
                                }

                                State = 226; Match(T__11);
                            }
                            break;
                        case 7:
                            {
                                _localctx = new PropertyRefScalarExpressionBaseContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 227; Match(IDENTIFIER);
                            }
                            break;
                        case 8:
                            {
                                _localctx = new SubqueryScalarExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 228; Match(T__2);
                                State = 229; sql_query();
                                State = 230; Match(T__3);
                            }
                            break;
                        case 9:
                            {
                                _localctx = new UnaryScalarExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 232; unary_operator();
                                State = 233; scalar_expression(1);
                            }
                            break;
                    }
                    Context.Stop = TokenStream.LT(-1);
                    State = 278;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 27, Context);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                    {
                        if (_alt == 1)
                        {
                            if (ParseListeners != null)
                                TriggerExitRuleEvent();
                            _prevctx = _localctx;
                            {
                                State = 276;
                                ErrorHandler.Sync(this);
                                switch (Interpreter.AdaptivePredict(TokenStream, 26, Context))
                                {
                                    case 1:
                                        {
                                            _localctx = new BetweenScalarExpressionContext(new Scalar_expressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_scalar_expression);
                                            State = 237;
                                            if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
                                            State = 239;
                                            ErrorHandler.Sync(this);
                                            _la = TokenStream.LA(1);
                                            if (_la == K_NOT)
                                            {
                                                {
                                                    State = 238; Match(K_NOT);
                                                }
                                            }

                                            State = 241; Match(K_BETWEEN);
                                            State = 242; scalar_expression(0);
                                            State = 243; Match(K_AND);
                                            State = 244; scalar_expression(15);
                                        }
                                        break;
                                    case 2:
                                        {
                                            _localctx = new BinaryScalarExpressionContext(new Scalar_expressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_scalar_expression);
                                            State = 246;
                                            if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
                                            State = 247; binary_operator();
                                            State = 248; scalar_expression(14);
                                        }
                                        break;
                                    case 3:
                                        {
                                            _localctx = new CoalesceScalarExpressionContext(new Scalar_expressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_scalar_expression);
                                            State = 250;
                                            if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
                                            State = 251; Match(T__7);
                                            State = 252; scalar_expression(13);
                                        }
                                        break;
                                    case 4:
                                        {
                                            _localctx = new ConditionalScalarExpressionContext(new Scalar_expressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_scalar_expression);
                                            State = 253;
                                            if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
                                            State = 254; Match(T__8);
                                            State = 255; scalar_expression(0);
                                            State = 256; Match(T__9);
                                            State = 257; scalar_expression(12);
                                        }
                                        break;
                                    case 5:
                                        {
                                            _localctx = new InScalarExpressionContext(new Scalar_expressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_scalar_expression);
                                            State = 259;
                                            if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
                                            State = 261;
                                            ErrorHandler.Sync(this);
                                            _la = TokenStream.LA(1);
                                            if (_la == K_NOT)
                                            {
                                                {
                                                    State = 260; Match(K_NOT);
                                                }
                                            }

                                            State = 263; Match(K_IN);
                                            State = 264; Match(T__2);
                                            State = 265; scalar_expression_list();
                                            State = 266; Match(T__3);
                                        }
                                        break;
                                    case 6:
                                        {
                                            _localctx = new MemberIndexerScalarExpressionContext(new Scalar_expressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_scalar_expression);
                                            State = 268;
                                            if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
                                            State = 269; Match(T__5);
                                            State = 270; scalar_expression(0);
                                            State = 271; Match(T__6);
                                        }
                                        break;
                                    case 7:
                                        {
                                            _localctx = new PropertyRefScalarExpressionRecursiveContext(new Scalar_expressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_scalar_expression);
                                            State = 273;
                                            if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
                                            State = 274; Match(T__4);
                                            State = 275; Match(IDENTIFIER);
                                        }
                                        break;
                                }
                            }
                        }
                        State = 280;
                        ErrorHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(TokenStream, 27, Context);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                UnrollRecursionContexts(_parentctx);
            }
            return _localctx;
        }

        public partial class Scalar_expression_listContext : ParserRuleContext
        {
            public Scalar_expressionContext[] scalar_expression()
            {
                return GetRuleContexts<Scalar_expressionContext>();
            }
            public Scalar_expressionContext scalar_expression(int i)
            {
                return GetRuleContext<Scalar_expressionContext>(i);
            }
            public Scalar_expression_listContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_scalar_expression_list; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterScalar_expression_list(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitScalar_expression_list(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitScalar_expression_list(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Scalar_expression_listContext scalar_expression_list()
        {
            Scalar_expression_listContext _localctx = new Scalar_expression_listContext(Context, State);
            EnterRule(_localctx, 46, RULE_scalar_expression_list);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 281; scalar_expression(0);
                    State = 286;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == T__1)
                    {
                        {
                            {
                                State = 282; Match(T__1);
                                State = 283; scalar_expression(0);
                            }
                        }
                        State = 288;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Binary_operatorContext : ParserRuleContext
        {
            public ITerminalNode K_AND() { return GetToken(AntlrSqlParser.K_AND, 0); }
            public ITerminalNode K_OR() { return GetToken(AntlrSqlParser.K_OR, 0); }
            public Binary_operatorContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_binary_operator; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterBinary_operator(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitBinary_operator(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBinary_operator(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Binary_operatorContext binary_operator()
        {
            Binary_operatorContext _localctx = new Binary_operatorContext(Context, State);
            EnterRule(_localctx, 48, RULE_binary_operator);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 289;
                    _la = TokenStream.LA(1);
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << K_AND) | (1L << K_OR))) != 0)))
                    {
                        ErrorHandler.RecoverInline(this);
                    }
                    else
                    {
                        ErrorHandler.ReportMatch(this);
                        Consume();
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Unary_operatorContext : ParserRuleContext
        {
            public ITerminalNode K_NOT() { return GetToken(AntlrSqlParser.K_NOT, 0); }
            public Unary_operatorContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_unary_operator; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterUnary_operator(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitUnary_operator(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Unary_operatorContext unary_operator()
        {
            Unary_operatorContext _localctx = new Unary_operatorContext(Context, State);
            EnterRule(_localctx, 50, RULE_unary_operator);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 291;
                    _la = TokenStream.LA(1);
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__25) | (1L << T__26) | (1L << K_NOT))) != 0)))
                    {
                        ErrorHandler.RecoverInline(this);
                    }
                    else
                    {
                        ErrorHandler.ReportMatch(this);
                        Consume();
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Object_propertty_listContext : ParserRuleContext
        {
            public Object_propertyContext[] object_property()
            {
                return GetRuleContexts<Object_propertyContext>();
            }
            public Object_propertyContext object_property(int i)
            {
                return GetRuleContext<Object_propertyContext>(i);
            }
            public Object_propertty_listContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_object_propertty_list; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterObject_propertty_list(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitObject_propertty_list(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitObject_propertty_list(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Object_propertty_listContext object_propertty_list()
        {
            Object_propertty_listContext _localctx = new Object_propertty_listContext(Context, State);
            EnterRule(_localctx, 52, RULE_object_propertty_list);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 293; object_property();
                    State = 298;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == T__1)
                    {
                        {
                            {
                                State = 294; Match(T__1);
                                State = 295; object_property();
                            }
                        }
                        State = 300;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Object_propertyContext : ParserRuleContext
        {
            public ITerminalNode STRING_LITERAL() { return GetToken(AntlrSqlParser.STRING_LITERAL, 0); }
            public Scalar_expressionContext scalar_expression()
            {
                return GetRuleContext<Scalar_expressionContext>(0);
            }
            public Object_propertyContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_object_property; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterObject_property(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitObject_property(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitObject_property(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Object_propertyContext object_property()
        {
            Object_propertyContext _localctx = new Object_propertyContext(Context, State);
            EnterRule(_localctx, 54, RULE_object_property);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 301; Match(STRING_LITERAL);
                    State = 302; Match(T__9);
                    State = 303; scalar_expression(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LiteralContext : ParserRuleContext
        {
            public ITerminalNode STRING_LITERAL() { return GetToken(AntlrSqlParser.STRING_LITERAL, 0); }
            public ITerminalNode NUMERIC_LITERAL() { return GetToken(AntlrSqlParser.NUMERIC_LITERAL, 0); }
            public ITerminalNode K_TRUE() { return GetToken(AntlrSqlParser.K_TRUE, 0); }
            public ITerminalNode K_FALSE() { return GetToken(AntlrSqlParser.K_FALSE, 0); }
            public ITerminalNode K_NULL() { return GetToken(AntlrSqlParser.K_NULL, 0); }
            public ITerminalNode K_UNDEFINED() { return GetToken(AntlrSqlParser.K_UNDEFINED, 0); }
            public LiteralContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_literal; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.EnterLiteral(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IsqlListener typedListener = listener as IsqlListener;
                if (typedListener != null) typedListener.ExitLiteral(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LiteralContext literal()
        {
            LiteralContext _localctx = new LiteralContext(Context, State);
            EnterRule(_localctx, 56, RULE_literal);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 305;
                    _la = TokenStream.LA(1);
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_FALSE) | (1L << K_NULL) | (1L << K_TRUE) | (1L << K_UNDEFINED) | (1L << NUMERIC_LITERAL) | (1L << STRING_LITERAL))) != 0)))
                    {
                        ErrorHandler.RecoverInline(this);
                    }
                    else
                    {
                        ErrorHandler.ReportMatch(this);
                        Consume();
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex)
        {
            switch (ruleIndex)
            {
                case 10: return collection_expression_sempred((Collection_expressionContext)_localctx, predIndex);
                case 12: return path_expression_sempred((Path_expressionContext)_localctx, predIndex);
                case 22: return scalar_expression_sempred((Scalar_expressionContext)_localctx, predIndex);
            }
            return true;
        }
        private bool collection_expression_sempred(Collection_expressionContext _localctx, int predIndex)
        {
            switch (predIndex)
            {
                case 0: return Precpred(Context, 1);
            }
            return true;
        }
        private bool path_expression_sempred(Path_expressionContext _localctx, int predIndex)
        {
            switch (predIndex)
            {
                case 1: return Precpred(Context, 4);
                case 2: return Precpred(Context, 3);
                case 3: return Precpred(Context, 2);
            }
            return true;
        }
        private bool scalar_expression_sempred(Scalar_expressionContext _localctx, int predIndex)
        {
            switch (predIndex)
            {
                case 4: return Precpred(Context, 14);
                case 5: return Precpred(Context, 13);
                case 6: return Precpred(Context, 12);
                case 7: return Precpred(Context, 11);
                case 8: return Precpred(Context, 8);
                case 9: return Precpred(Context, 6);
                case 10: return Precpred(Context, 3);
            }
            return true;
        }

        private static char[] _serializedATN = {
        '\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786',
        '\x5964', '\x3', '<', '\x136', '\x4', '\x2', '\t', '\x2', '\x4', '\x3',
        '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4',
        '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b',
        '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v',
        '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t',
        '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4',
        '\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t',
        '\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4',
        '\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t',
        '\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4',
        '\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t',
        '\x1D', '\x4', '\x1E', '\t', '\x1E', '\x3', '\x2', '\x3', '\x2', '\x3',
        '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x42', '\n', '\x3',
        '\x3', '\x3', '\x5', '\x3', '\x45', '\n', '\x3', '\x3', '\x3', '\x5',
        '\x3', 'H', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', 'K', '\n', '\x3',
        '\x3', '\x3', '\x5', '\x3', 'N', '\n', '\x3', '\x3', '\x4', '\x3', '\x4',
        '\x5', '\x4', 'R', '\n', '\x4', '\x3', '\x4', '\x5', '\x4', 'U', '\n',
        '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3',
        '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '_', '\n',
        '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b',
        '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 'i', '\n', '\t', '\f',
        '\t', '\xE', '\t', 'l', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n',
        '\x5', '\n', 'q', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3',
        '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 'z', '\n', '\f',
        '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x7F', '\n', '\f',
        '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x84', '\n', '\f',
        '\f', '\f', '\xE', '\f', '\x87', '\v', '\f', '\x3', '\r', '\x3', '\r',
        '\x5', '\r', '\x8B', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r',
        '\x3', '\r', '\x5', '\r', '\x91', '\n', '\r', '\x3', '\xE', '\x3', '\xE',
        '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE',
        '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE',
        '\a', '\xE', '\x9F', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xA2', '\v',
        '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3',
        '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3',
        '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a',
        '\x12', '\xB2', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xB5', '\v',
        '\x12', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xB9', '\n', '\x13',
        '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15',
        '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17',
        '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18',
        '\xC9', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3',
        '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3',
        '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5',
        '\x18', '\xD8', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18',
        '\x5', '\x18', '\xDD', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3',
        '\x18', '\x3', '\x18', '\x5', '\x18', '\xE3', '\n', '\x18', '\x3', '\x18',
        '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18',
        '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\xEE', '\n',
        '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\xF2', '\n', '\x18',
        '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18',
        '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18',
        '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18',
        '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18',
        '\x5', '\x18', '\x108', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3',
        '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3',
        '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3',
        '\x18', '\a', '\x18', '\x117', '\n', '\x18', '\f', '\x18', '\xE', '\x18',
        '\x11A', '\v', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a',
        '\x19', '\x11F', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x122', '\v',
        '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3',
        '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x12B', '\n', '\x1C',
        '\f', '\x1C', '\xE', '\x1C', '\x12E', '\v', '\x1C', '\x3', '\x1D', '\x3',
        '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3',
        '\x1E', '\x2', '\x5', '\x16', '\x1A', '.', '\x1F', '\x2', '\x4', '\x6',
        '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A',
        '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32',
        '\x34', '\x36', '\x38', ':', '\x2', '\x6', '\x4', '\x2', '!', '!', '$',
        '$', '\x6', '\x2', '\x3', '\x3', '\xF', '\x1C', '\x1E', '\x1E', '\x30',
        '\x30', '\x5', '\x2', '\xF', '\xF', '\x1C', '\x1D', '-', '-', '\a', '\x2',
        '\'', '\'', '.', '.', '\x34', '\x34', '\x36', '\x36', ':', ';', '\x2',
        '\x144', '\x2', '<', '\x3', '\x2', '\x2', '\x2', '\x4', '?', '\x3', '\x2',
        '\x2', '\x2', '\x6', 'O', '\x3', '\x2', '\x2', '\x2', '\b', 'X', '\x3',
        '\x2', '\x2', '\x2', '\n', '^', '\x3', '\x2', '\x2', '\x2', '\f', '`',
        '\x3', '\x2', '\x2', '\x2', '\xE', '\x62', '\x3', '\x2', '\x2', '\x2',
        '\x10', '\x65', '\x3', '\x2', '\x2', '\x2', '\x12', 'm', '\x3', '\x2',
        '\x2', '\x2', '\x14', 'r', '\x3', '\x2', '\x2', '\x2', '\x16', '~', '\x3',
        '\x2', '\x2', '\x2', '\x18', '\x90', '\x3', '\x2', '\x2', '\x2', '\x1A',
        '\x92', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xA3', '\x3', '\x2', '\x2',
        '\x2', '\x1E', '\xA6', '\x3', '\x2', '\x2', '\x2', ' ', '\xAA', '\x3',
        '\x2', '\x2', '\x2', '\"', '\xAE', '\x3', '\x2', '\x2', '\x2', '$', '\xB6',
        '\x3', '\x2', '\x2', '\x2', '&', '\xBA', '\x3', '\x2', '\x2', '\x2', '(',
        '\xBC', '\x3', '\x2', '\x2', '\x2', '*', '\xC1', '\x3', '\x2', '\x2',
        '\x2', ',', '\xC3', '\x3', '\x2', '\x2', '\x2', '.', '\xED', '\x3', '\x2',
        '\x2', '\x2', '\x30', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x32', '\x123',
        '\x3', '\x2', '\x2', '\x2', '\x34', '\x125', '\x3', '\x2', '\x2', '\x2',
        '\x36', '\x127', '\x3', '\x2', '\x2', '\x2', '\x38', '\x12F', '\x3', '\x2',
        '\x2', '\x2', ':', '\x133', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x5',
        '\x4', '\x3', '\x2', '=', '>', '\a', '\x2', '\x2', '\x3', '>', '\x3',
        '\x3', '\x2', '\x2', '\x2', '?', '\x41', '\x5', '\x6', '\x4', '\x2', '@',
        '\x42', '\x5', '\x14', '\v', '\x2', '\x41', '@', '\x3', '\x2', '\x2',
        '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\x44', '\x3',
        '\x2', '\x2', '\x2', '\x43', '\x45', '\x5', '\x1C', '\xF', '\x2', '\x44',
        '\x43', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', '\x2',
        '\x2', '\x45', 'G', '\x3', '\x2', '\x2', '\x2', '\x46', 'H', '\x5', '\x1E',
        '\x10', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3',
        '\x2', '\x2', '\x2', 'H', 'J', '\x3', '\x2', '\x2', '\x2', 'I', 'K', '\x5',
        ' ', '\x11', '\x2', 'J', 'I', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3',
        '\x2', '\x2', '\x2', 'K', 'M', '\x3', '\x2', '\x2', '\x2', 'L', 'N', '\x5',
        '(', '\x15', '\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3',
        '\x2', '\x2', '\x2', 'N', '\x5', '\x3', '\x2', '\x2', '\x2', 'O', 'Q',
        '\a', '\x32', '\x2', '\x2', 'P', 'R', '\a', '%', '\x2', '\x2', 'Q', 'P',
        '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R',
        'T', '\x3', '\x2', '\x2', '\x2', 'S', 'U', '\x5', '\b', '\x5', '\x2',
        'T', 'S', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2',
        'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x5', '\n', '\x6', '\x2',
        'W', '\a', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', '\x33', '\x2',
        '\x2', 'Y', 'Z', '\a', ':', '\x2', '\x2', 'Z', '\t', '\x3', '\x2', '\x2',
        '\x2', '[', '_', '\x5', '\f', '\a', '\x2', '\\', '_', '\x5', '\xE', '\b',
        '\x2', ']', '_', '\x5', '\x10', '\t', '\x2', '^', '[', '\x3', '\x2', '\x2',
        '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '^', ']', '\x3', '\x2',
        '\x2', '\x2', '_', '\v', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\a',
        '\x3', '\x2', '\x2', '\x61', '\r', '\x3', '\x2', '\x2', '\x2', '\x62',
        '\x63', '\a', '\x37', '\x2', '\x2', '\x63', '\x64', '\x5', '.', '\x18',
        '\x2', '\x64', '\xF', '\x3', '\x2', '\x2', '\x2', '\x65', 'j', '\x5',
        '\x12', '\n', '\x2', '\x66', 'g', '\a', '\x4', '\x2', '\x2', 'g', 'i',
        '\x5', '\x12', '\n', '\x2', 'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'i',
        'l', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2',
        'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', '\x11', '\x3', '\x2', '\x2',
        '\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 'm', 'p', '\x5', '.', '\x18',
        '\x2', 'n', 'o', '\a', ' ', '\x2', '\x2', 'o', 'q', '\a', '<', '\x2',
        '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', '\x2',
        '\x2', 'q', '\x13', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', '(', '\x2',
        '\x2', 's', 't', '\x5', '\x16', '\f', '\x2', 't', '\x15', '\x3', '\x2',
        '\x2', '\x2', 'u', 'v', '\b', '\f', '\x1', '\x2', 'v', 'y', '\x5', '\x18',
        '\r', '\x2', 'w', 'x', '\a', ' ', '\x2', '\x2', 'x', 'z', '\a', '<', '\x2',
        '\x2', 'y', 'w', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2',
        '\x2', 'z', '\x7F', '\x3', '\x2', '\x2', '\x2', '{', '|', '\a', '<', '\x2',
        '\x2', '|', '}', '\a', '*', '\x2', '\x2', '}', '\x7F', '\x5', '\x18',
        '\r', '\x2', '~', 'u', '\x3', '\x2', '\x2', '\x2', '~', '{', '\x3', '\x2',
        '\x2', '\x2', '\x7F', '\x85', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81',
        '\f', '\x3', '\x2', '\x2', '\x81', '\x82', '\a', '+', '\x2', '\x2', '\x82',
        '\x84', '\x5', '\x16', '\f', '\x4', '\x83', '\x80', '\x3', '\x2', '\x2',
        '\x2', '\x84', '\x87', '\x3', '\x2', '\x2', '\x2', '\x85', '\x83', '\x3',
        '\x2', '\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2', '\x2', '\x86',
        '\x17', '\x3', '\x2', '\x2', '\x2', '\x87', '\x85', '\x3', '\x2', '\x2',
        '\x2', '\x88', '\x8A', '\a', '<', '\x2', '\x2', '\x89', '\x8B', '\x5',
        '\x1A', '\xE', '\x2', '\x8A', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8A',
        '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x91', '\x3', '\x2', '\x2',
        '\x2', '\x8C', '\x8D', '\a', '\x5', '\x2', '\x2', '\x8D', '\x8E', '\x5',
        '\x4', '\x3', '\x2', '\x8E', '\x8F', '\a', '\x6', '\x2', '\x2', '\x8F',
        '\x91', '\x3', '\x2', '\x2', '\x2', '\x90', '\x88', '\x3', '\x2', '\x2',
        '\x2', '\x90', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x91', '\x19', '\x3',
        '\x2', '\x2', '\x2', '\x92', '\xA0', '\b', '\xE', '\x1', '\x2', '\x93',
        '\x94', '\f', '\x6', '\x2', '\x2', '\x94', '\x95', '\a', '\a', '\x2',
        '\x2', '\x95', '\x9F', '\a', '<', '\x2', '\x2', '\x96', '\x97', '\f',
        '\x5', '\x2', '\x2', '\x97', '\x98', '\a', '\b', '\x2', '\x2', '\x98',
        '\x99', '\a', ':', '\x2', '\x2', '\x99', '\x9F', '\a', '\t', '\x2', '\x2',
        '\x9A', '\x9B', '\f', '\x4', '\x2', '\x2', '\x9B', '\x9C', '\a', '\b',
        '\x2', '\x2', '\x9C', '\x9D', '\a', ';', '\x2', '\x2', '\x9D', '\x9F',
        '\a', '\t', '\x2', '\x2', '\x9E', '\x93', '\x3', '\x2', '\x2', '\x2',
        '\x9E', '\x96', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9A', '\x3', '\x2',
        '\x2', '\x2', '\x9F', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E',
        '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2',
        '\xA1', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2',
        '\x2', '\x2', '\xA3', '\xA4', '\a', '\x38', '\x2', '\x2', '\xA4', '\xA5',
        '\x5', '.', '\x18', '\x2', '\xA5', '\x1D', '\x3', '\x2', '\x2', '\x2',
        '\xA6', '\xA7', '\a', ')', '\x2', '\x2', '\xA7', '\xA8', '\a', '#', '\x2',
        '\x2', '\xA8', '\xA9', '\x5', '\x30', '\x19', '\x2', '\xA9', '\x1F', '\x3',
        '\x2', '\x2', '\x2', '\xAA', '\xAB', '\a', '\x31', '\x2', '\x2', '\xAB',
        '\xAC', '\a', '#', '\x2', '\x2', '\xAC', '\xAD', '\x5', '\"', '\x12',
        '\x2', '\xAD', '!', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB3', '\x5',
        '$', '\x13', '\x2', '\xAF', '\xB0', '\a', '\x4', '\x2', '\x2', '\xB0',
        '\xB2', '\x5', '$', '\x13', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2',
        '\x2', '\xB2', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3',
        '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4',
        '#', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2',
        '\x2', '\xB6', '\xB8', '\x5', '.', '\x18', '\x2', '\xB7', '\xB9', '\x5',
        '&', '\x14', '\x2', '\xB8', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB8',
        '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB9', '%', '\x3', '\x2', '\x2',
        '\x2', '\xBA', '\xBB', '\t', '\x2', '\x2', '\x2', '\xBB', '\'', '\x3',
        '\x2', '\x2', '\x2', '\xBC', '\xBD', '\a', '/', '\x2', '\x2', '\xBD',
        '\xBE', '\x5', '*', '\x16', '\x2', '\xBE', '\xBF', '\a', ',', '\x2', '\x2',
        '\xBF', '\xC0', '\x5', ',', '\x17', '\x2', '\xC0', ')', '\x3', '\x2',
        '\x2', '\x2', '\xC1', '\xC2', '\a', ':', '\x2', '\x2', '\xC2', '+', '\x3',
        '\x2', '\x2', '\x2', '\xC3', '\xC4', '\a', ':', '\x2', '\x2', '\xC4',
        '-', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\b', '\x18', '\x1',
        '\x2', '\xC6', '\xC8', '\a', '\b', '\x2', '\x2', '\xC7', '\xC9', '\x5',
        '\x30', '\x19', '\x2', '\xC8', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC8',
        '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', '\x2',
        '\x2', '\xCA', '\xEE', '\a', '\t', '\x2', '\x2', '\xCB', '\xCC', '\a',
        '\x1F', '\x2', '\x2', '\xCC', '\xCD', '\a', '\x5', '\x2', '\x2', '\xCD',
        '\xCE', '\x5', '\x4', '\x3', '\x2', '\xCE', '\xCF', '\a', '\x6', '\x2',
        '\x2', '\xCF', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\a',
        '&', '\x2', '\x2', '\xD1', '\xD2', '\a', '\x5', '\x2', '\x2', '\xD2',
        '\xD3', '\x5', '\x4', '\x3', '\x2', '\xD3', '\xD4', '\a', '\x6', '\x2',
        '\x2', '\xD4', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\a',
        '\x35', '\x2', '\x2', '\xD6', '\xD8', '\a', '\a', '\x2', '\x2', '\xD7',
        '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\x3', '\x2', '\x2',
        '\x2', '\xD8', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\a',
        '<', '\x2', '\x2', '\xDA', '\xDC', '\a', '\x5', '\x2', '\x2', '\xDB',
        '\xDD', '\x5', '\x30', '\x19', '\x2', '\xDC', '\xDB', '\x3', '\x2', '\x2',
        '\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\x3',
        '\x2', '\x2', '\x2', '\xDE', '\xEE', '\a', '\x6', '\x2', '\x2', '\xDF',
        '\xEE', '\x5', ':', '\x1E', '\x2', '\xE0', '\xE2', '\a', '\r', '\x2',
        '\x2', '\xE1', '\xE3', '\x5', '\x36', '\x1C', '\x2', '\xE2', '\xE1', '\x3',
        '\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3',
        '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xEE', '\a', '\xE', '\x2',
        '\x2', '\xE5', '\xEE', '\a', '<', '\x2', '\x2', '\xE6', '\xE7', '\a',
        '\x5', '\x2', '\x2', '\xE7', '\xE8', '\x5', '\x4', '\x3', '\x2', '\xE8',
        '\xE9', '\a', '\x6', '\x2', '\x2', '\xE9', '\xEE', '\x3', '\x2', '\x2',
        '\x2', '\xEA', '\xEB', '\x5', '\x34', '\x1B', '\x2', '\xEB', '\xEC', '\x5',
        '.', '\x18', '\x3', '\xEC', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xED',
        '\xC5', '\x3', '\x2', '\x2', '\x2', '\xED', '\xCB', '\x3', '\x2', '\x2',
        '\x2', '\xED', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xED', '\xD7', '\x3',
        '\x2', '\x2', '\x2', '\xED', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xED',
        '\xE0', '\x3', '\x2', '\x2', '\x2', '\xED', '\xE5', '\x3', '\x2', '\x2',
        '\x2', '\xED', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEA', '\x3',
        '\x2', '\x2', '\x2', '\xEE', '\x118', '\x3', '\x2', '\x2', '\x2', '\xEF',
        '\xF1', '\f', '\x10', '\x2', '\x2', '\xF0', '\xF2', '\a', '-', '\x2',
        '\x2', '\xF1', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\x3',
        '\x2', '\x2', '\x2', '\xF2', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF3',
        '\xF4', '\a', '\"', '\x2', '\x2', '\xF4', '\xF5', '\x5', '.', '\x18',
        '\x2', '\xF5', '\xF6', '\a', '\x1E', '\x2', '\x2', '\xF6', '\xF7', '\x5',
        '.', '\x18', '\x11', '\xF7', '\x117', '\x3', '\x2', '\x2', '\x2', '\xF8',
        '\xF9', '\f', '\xF', '\x2', '\x2', '\xF9', '\xFA', '\x5', '\x32', '\x1A',
        '\x2', '\xFA', '\xFB', '\x5', '.', '\x18', '\x10', '\xFB', '\x117', '\x3',
        '\x2', '\x2', '\x2', '\xFC', '\xFD', '\f', '\xE', '\x2', '\x2', '\xFD',
        '\xFE', '\a', '\n', '\x2', '\x2', '\xFE', '\x117', '\x5', '.', '\x18',
        '\xF', '\xFF', '\x100', '\f', '\r', '\x2', '\x2', '\x100', '\x101', '\a',
        '\v', '\x2', '\x2', '\x101', '\x102', '\x5', '.', '\x18', '\x2', '\x102',
        '\x103', '\a', '\f', '\x2', '\x2', '\x103', '\x104', '\x5', '.', '\x18',
        '\xE', '\x104', '\x117', '\x3', '\x2', '\x2', '\x2', '\x105', '\x107',
        '\f', '\n', '\x2', '\x2', '\x106', '\x108', '\a', '-', '\x2', '\x2', '\x107',
        '\x106', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\x3', '\x2', '\x2',
        '\x2', '\x108', '\x109', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A',
        '\a', '*', '\x2', '\x2', '\x10A', '\x10B', '\a', '\x5', '\x2', '\x2',
        '\x10B', '\x10C', '\x5', '\x30', '\x19', '\x2', '\x10C', '\x10D', '\a',
        '\x6', '\x2', '\x2', '\x10D', '\x117', '\x3', '\x2', '\x2', '\x2', '\x10E',
        '\x10F', '\f', '\b', '\x2', '\x2', '\x10F', '\x110', '\a', '\b', '\x2',
        '\x2', '\x110', '\x111', '\x5', '.', '\x18', '\x2', '\x111', '\x112',
        '\a', '\t', '\x2', '\x2', '\x112', '\x117', '\x3', '\x2', '\x2', '\x2',
        '\x113', '\x114', '\f', '\x5', '\x2', '\x2', '\x114', '\x115', '\a', '\a',
        '\x2', '\x2', '\x115', '\x117', '\a', '<', '\x2', '\x2', '\x116', '\xEF',
        '\x3', '\x2', '\x2', '\x2', '\x116', '\xF8', '\x3', '\x2', '\x2', '\x2',
        '\x116', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x116', '\xFF', '\x3', '\x2',
        '\x2', '\x2', '\x116', '\x105', '\x3', '\x2', '\x2', '\x2', '\x116', '\x10E',
        '\x3', '\x2', '\x2', '\x2', '\x116', '\x113', '\x3', '\x2', '\x2', '\x2',
        '\x117', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x118', '\x116', '\x3',
        '\x2', '\x2', '\x2', '\x118', '\x119', '\x3', '\x2', '\x2', '\x2', '\x119',
        '/', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x118', '\x3', '\x2', '\x2',
        '\x2', '\x11B', '\x120', '\x5', '.', '\x18', '\x2', '\x11C', '\x11D',
        '\a', '\x4', '\x2', '\x2', '\x11D', '\x11F', '\x5', '.', '\x18', '\x2',
        '\x11E', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x122', '\x3',
        '\x2', '\x2', '\x2', '\x120', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x120',
        '\x121', '\x3', '\x2', '\x2', '\x2', '\x121', '\x31', '\x3', '\x2', '\x2',
        '\x2', '\x122', '\x120', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124',
        '\t', '\x3', '\x2', '\x2', '\x124', '\x33', '\x3', '\x2', '\x2', '\x2',
        '\x125', '\x126', '\t', '\x4', '\x2', '\x2', '\x126', '\x35', '\x3', '\x2',
        '\x2', '\x2', '\x127', '\x12C', '\x5', '\x38', '\x1D', '\x2', '\x128',
        '\x129', '\a', '\x4', '\x2', '\x2', '\x129', '\x12B', '\x5', '\x38', '\x1D',
        '\x2', '\x12A', '\x128', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12E',
        '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12A', '\x3', '\x2', '\x2', '\x2',
        '\x12C', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x37', '\x3',
        '\x2', '\x2', '\x2', '\x12E', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12F',
        '\x130', '\a', ';', '\x2', '\x2', '\x130', '\x131', '\a', '\f', '\x2',
        '\x2', '\x131', '\x132', '\x5', '.', '\x18', '\x2', '\x132', '\x39', '\x3',
        '\x2', '\x2', '\x2', '\x133', '\x134', '\t', '\x5', '\x2', '\x2', '\x134',
        ';', '\x3', '\x2', '\x2', '\x2', ' ', '\x41', '\x44', 'G', 'J', 'M', 'Q',
        'T', '^', 'j', 'p', 'y', '~', '\x85', '\x8A', '\x90', '\x9E', '\xA0',
        '\xB3', '\xB8', '\xC8', '\xD7', '\xDC', '\xE2', '\xED', '\xF1', '\x107',
        '\x116', '\x118', '\x120', '\x12C',
    };

        public static readonly ATN _ATN =
            new ATNDeserializer().Deserialize(_serializedATN);
    }
}
